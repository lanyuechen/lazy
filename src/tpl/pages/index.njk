import React, { useEffect, useState } from 'react';
import { connect } from 'dva';
import { Table, Card, Button, Icon, Modal, Spin } from 'antd';

import { naturalSorter } from '@/utils/lazy-ant/sorter';
import { searchFilter } from '@/utils/lazy-ant/filter';

import ModalUpsert from './ModalUpsert';

const {{ name|capitalize }}: React.FC<any> = props => {
  const { dispatch, list, modalUpsertVisible, loading, current } = props;

  useEffect(() => {
    dispatch({
      type: '{{ name }}/list',
    });
  }, []);

  const columns: any[] = [
    {
      title: 'No.',
      dataIndex: '_idx',
    },
    {%- for column in columns %}
    {
      title: '{{ column.title }}',
      dataIndex: '{{ column.dataIndex }}',
      {%- if column.sorter %}
      sorter: naturalSorter('{{ column.dataIndex }}'),
      {%- endif %}
      {%- if column.filter %}
      ...searchFilter('{{ column.dataIndex }}'),
      {%- endif %}
    },
    {%- endfor %}
    {
      title: 'Action',
      align: 'center',
      render: (txt: any, record: any) => (
        <React.Fragment>
          <Button
            type="link"
            icon="edit"
            onClick={() => dispatch({type: '{{ name }}/showModalUpsert', payload: record})}
          />
          <Button
            type="link"
            icon="delete"
            onClick={() => handleDelete(record.id)}
          />
        </React.Fragment>
      ),
    },
  ];

  const handleAdd = (values: any) => {
    if (current) {
      dispatch({
        type: `{{ name }}/update`,
        payload: {
          id: current.id,
          values,
        },
      });
    } else {
      dispatch({
        type: `{{ name }}/create`,
        payload: values,
      });
    }
  };

  const handleDelete = (id: string) => {
    Modal.confirm({
      title: 'Confirm',
      content: 'Do you confirm delete this {{ name }}?',
      onOk: () => {
        dispatch({
          type: '{{ name }}/remove',
          payload: id,
        });
      },
    });
  };

  const dataSource = list.map((d: any, i: number) => ({...d, _idx: i + 1}));

  {%- if batch %}
  const [ selectedRowKeys, setSelectedRowKeys ] = useState([]);

  const rowSelection = {
    selectedRowKeys,
    onChange: (keys: any) => {
      setSelectedRowKeys(keys);
    },
  };

  const handleBatchDelete = () => {
    Modal.confirm({
      title: 'Confirm',
      content: 'Do you confirm delete these {{ name }}?',
      onOk: () => {
        dispatch({
          type: '{{ name }}/remove',
          payload: selectedRowKeys,
        });
        setSelectedRowKeys([]);
      },
    })
  };
  {%- endif %}

  return (
    <Spin spinning={loading}>
      <div style={% raw %}{{ marginBottom: 15, textAlign: 'right' }}{% endraw %}>
        {%- if batch %}
        <Button
          type="danger"
          onClick={handleBatchDelete}
          disabled={selectedRowKeys.length === 0}
        >
          <Icon type="delete" /> Delete
        </Button>
        &nbsp;&nbsp;&nbsp;&nbsp;
        {%- endif %}
        <Button onClick={() => dispatch({ type: '{{ name }}/showModalUpsert' })}>
          <Icon type="plus" /> New
        </Button>
        <ModalUpsert
          visible={modalUpsertVisible}
          onOk={handleAdd}
          defaultValue={current}
          onCancel={() => dispatch({ type: '{{ name }}/hideModalUpsert' })}
        />
      </div>
      <Card bodyStyle={% raw %}{{ padding: 0 }}{% endraw %}>
        <Table
          columns={columns}
          dataSource={dataSource}
          {% if batch -%}
            rowSelection={rowSelection}
          {%- endif %}
          rowKey="id"
        />
      </Card>
    </Spin>
  );
};

export default connect(({ {{ name }}, loading }: any) => ({
  ...{{ name }},
  loading: loading.models.{{ name }},
}))({{ name|capitalize }});